# -*- coding: utf-8 -*-
"""HW1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XeOxIVa2S5DTk8jx_ewakD8x4b1S7fpl
"""

import numpy as np
import pandas as pd
import csv
import math
import random
import io
#################################################################################
def main():
#Q2.1
  TotalRows = 0
  tokenList = []
  with open('tokenized_corpus.csv', newline='') as f:
      for row in csv.reader(f, delimiter=',', quoting=csv.QUOTE_NONE):
          tokenList += row
          TotalRows += 1

  a = np.array(tokenList)
  _, idx = np.unique(a, return_index=True)
  tokens = a[np.sort(idx)]
  print(tokens)
  print(len(tokens))
  featureSet  = np.empty( (TotalRows ,len(tokens)) )
  rows = []
  alp = tokens.tolist()
  index = 0

  with open('tokenized_corpus.csv', newline='') as g:
      for row in csv.reader(g, delimiter=',', quoting=csv.QUOTE_NONE):
        rows = unique(row)
        x = 0
        for i in rows:
            boo = row.count(i)
            x = alp.index(i)
            featureSet[index][x] = boo        
        index += 1
        
  np.savetxt("feature_set.csv",featureSet, delimiter=",")
  training = np.array(featureSet[0:4460 ,:])
  testing = np.array(featureSet[4460: ,:])

  label = []
  with open('labels.csv', newline='') as k:
      for row in csv.reader(k, delimiter=',', quoting=csv.QUOTE_NONE):
        label += row

  lenToken = len(tokens)
  label2 = label[0:4460]
  TjSpam  = np.zeros( lenToken )
  TjHam  = np.zeros( lenToken )


  for x in range(len(label2)):
        if label2[x] == '1':
          TjSpam = np.add(TjSpam,training[x])
        else:
          TjHam = np.add(TjHam,training[x])
      
            
  HamTotal = sum(TjHam)
  SpamTotal = sum(TjSpam)

  ThetaSpam = np.zeros(len(tokens))
  ThetaHam = np.zeros(len(tokens))

  ThetaSpam[:] = TjSpam[:]/SpamTotal
  ThetaHam[:] = TjHam[:]/HamTotal

  Tested_Data = []
  ThetaSpamlog = np.log(ThetaSpam)
  ThetaHamlog = np.log(ThetaHam)
  piSpam = np.log((sum(list(map(int, label2))))/4460)
  piHam = np.log(( 4460 - sum(list(map(int, label2))))/4460)
  for row in testing:
        true = 0
        false = 0
        rows = np.array(row)
        true  = rows*ThetaHamlog
        false = rows*ThetaSpamlog
        true = np.nan_to_num(true)
        false = np.nan_to_num(false)
        if sum(false.tolist()) + piSpam  >= sum(true.tolist()) + piHam:
          Tested_Data.append ('1')
        else:
          Tested_Data.append('0')

  label3 = label[4460:]  

  index3 =sum((np.array(label3)==np.array(Tested_Data)).tolist())
  accuracy = np.zeros((1,1))
  accuracy[0,0] = (index3/len(Tested_Data))*100

  np.savetxt("test_accuracy.csv",accuracy, delimiter=",")


  ThetaSpam_Lp = np.zeros(lenToken)
  ThetaHam_Lp = np.zeros(lenToken)
  alpha = 1

  ThetaSpam_Lp[:] = (TjSpam[:]+alpha)/(SpamTotal + lenToken)
  ThetaHam_Lp[:] = (TjHam[:]+alpha)/(HamTotal + lenToken)


  Tested_Data_Lp = []
  ThetaSpam_Lp_log= np.log(ThetaSpam_Lp)
  ThetaHam_Lp_log = np.log(ThetaHam_Lp)

  for row in testing:
        true = 0
        false = 0
        rows = np.array(row)
        true  = rows*ThetaHam_Lp_log
        false = rows*ThetaSpam_Lp_log
        true = np.nan_to_num(true)
        false = np.nan_to_num(false)
        if sum(false.tolist()) + piSpam  >= sum(true.tolist()) + piHam:
          Tested_Data_Lp.append ('1')
        else:
          Tested_Data_Lp.append('0')
  ###############################################################################
  #Q2.2

  corr_pred_Lp =sum((np.array(label3)==np.array(Tested_Data_Lp)).tolist())
  accuracy_Lp = np.zeros((1,1))
  accuracy_Lp[0,0] = (corr_pred_Lp/len(Tested_Data))*100
  np.savetxt("test_accuracy_laplace.csv",accuracy_Lp, delimiter=",")


  Vr = unique10(tokenList)
  lenVr = len(Vr)
  featureSet2  = np.empty( (TotalRows , lenVr))
  rows = []
  index = 0
  with open('tokenized_corpus.csv', newline='') as z:
      for row in csv.reader(z, delimiter=',', quoting=csv.QUOTE_NONE):
        for i in row:
          if i in Vr:
            boo = row.count(i)
            x = Vr.index(i)
            featureSet2[index][x] = boo        
        index += 1
  training2 = np.array(featureSet2[0:4460 ,:])
  testing2 = np.array(featureSet2[4460: ,:])

  ################################################################################
  #Q3.1

  TjSpamFS  = np.zeros( lenVr )
  TjHamFS  = np.zeros( lenVr )

  for x in range(len(label2)):
      if label2[x] == '1':
        TjSpamFS = np.add(TjSpamFS,training2[x])
      else:
        TjHamFS = np.add(TjHamFS,training2[x])
      
      
  ThetaSpam_LpFS = np.zeros(lenVr)
  ThetaHam_LpFS = np.zeros(lenVr)

  HamTotalFS = sum(TjHamFS)
  SpamTotalFS = sum(TjSpamFS)

  ThetaSpam_LpFS[:] = (TjSpamFS[:]+alpha)/(SpamTotalFS + lenVr)
  ThetaHam_LpFS[:] = (TjHamFS[:]+alpha)/(HamTotalFS + lenVr)

  ThetaSpam_LpFS_log= np.log(ThetaSpam_LpFS)
  ThetaHam_LpFS_log = np.log(ThetaHam_LpFS)
  inl = 5
  allAcc= []
  hAcc = 0
  hAccidx = 0
  rowFs = np.zeros((len(label3),1))
  tHFS = []
  tSFS = []
  indices = []
  test22 = testing2
  krx = 0
  mt = 0
  while inl > 0:
    if(krx < hAcc):
      break
    krx = hAcc
    for m in range(0,len(test22[1]-1)):
      Tested_Data_LpFs=[]
      rt = []
      rS = 0
      for row in test22:

        true = 0
        false = 0
        if mt == 0:
          rt = row[m:m+1]
          kt = 1 
          Hlt = ThetaHam_LpFS_log[m:m+1]
          Slt = ThetaSpam_LpFS_log[m:m+1]
        else:
          rt = rowFs.tolist()[rS] + row[m:m+1]
          Hlt = tHFS + ThetaHam_LpFS_log[m:m+1]
          Slt = tSFS + ThetaSpam_LpFS_log[m:m+1]
        true  = rt*Hlt
        false = rt*Slt
        true = np.nan_to_num(true)
        false = np.nan_to_num(false)
        if sum(false.tolist()) + piSpam  >= sum(true.tolist()) + piHam:
          Tested_Data_LpFs.append('1')
        else:
          Tested_Data_LpFs.append('0')
        rS =+ 1
      
      corr =sum((np.array(label3)==np.array(Tested_Data_LpFs)).tolist())
      acc = corr/len(Tested_Data_LpFs) 
      if acc >= hAcc:
        hAcc = acc
        hAccidx = m
    mt = 2    
    indices = indices + [m]
    rowFs = np.append(rowFs, test22[:,m:m+1],axis = 1)
    if kt == 1:
      rowFs = np.delete(rowFs, 0,axis = 1)
      tHFS =+ ThetaHam_LpFS_log[hAccidx:hAccidx+1]  
      tSFS =+ ThetaSpam_LpFS_log[hAccidx:hAccidx+1]
      kt = 3
    test22 = np.delete(test22, hAccidx, axis = 1)
    tHFS += ThetaHam_LpFS_log[hAccidx:hAccidx+1]  
    tSFS += ThetaSpam_LpFS_log[hAccidx:hAccidx+1]

    ThetaHam_LpFS_log = np.delete(ThetaHam_LpFS_log, hAccidx, axis = 0)
    ThetaSpam_LpFS_log = np.delete(ThetaSpam_LpFS_log, hAccidx, axis = 0)


  np.savetxt("forward_selection.csv",np.array(indices), delimiter=",")

def unique10(list1):
    a = np.array(list1)
    _, idx = np.unique(a, return_index=True)
    tokens = a[np.sort(idx)]
    list2 = [] 
    for x in tokens:
      if list1.count(x) > 9:
        list2.append(x)
    return list2

def unique(list1): 
    
      # intilize a null list 
      unique_list = [] 
      # traverse for all elements 
      for x in list1: 
          # check if exists in unique_list or not y
          if x not in unique_list: 
              unique_list.append(x) 
      # print list 
      return unique_list
        

main()

print(hAcc)

